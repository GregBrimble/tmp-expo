name: Build and Deploy
on:
  push:
    branches:
      - main

jobs:
  build-js:
    name: Build JavaScript assets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Node.js
        shell: bash -l {0}
        run: nvm install && nvm use
        # TODO: Could cache ~/.nvm/.cache
      - name: Cache Node.js
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Setup Expo
        uses: expo/expo-github-action@v5
        with:
          expo-version: 4.0.15
          expo-packager: npm
          expo-cache: true
      - name: Install Node.js dependencies
        run: npm ci
      - name: Build JavaScript assets
        run: expo export --public-url "$PUBLIC_URL"
        env:
          PUBLIC_URL: https://theevents.company/
      - name: Upload artifacts to GitHub Actions
        uses: actions/upload-artifact@v2
        with:
          name: js-assets
          path: dist/
  build-web:
    name: Build web assets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Node.js
        shell: bash -l {0}
        run: nvm install && nvm use
        # TODO: Could cache ~/.nvm/.cache
      - name: Cache Node.js
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Setup Expo
        uses: expo/expo-github-action@v5
        with:
          expo-version: 4.0.15
          expo-packager: npm
          expo-cache: true
      - name: Install Node.js dependencies
        run: npm ci
      - name: Build web
        run: expo build:web
      - name: Upload artifacts to GitHub Actions
        uses: actions/upload-artifact@v2
        with:
          name: web-assets
          path: web-build/
  build-fab:
    name: Build FAB
    needs: [build-js, build-web]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Node.js
        shell: bash -l {0}
        run: nvm install && nvm use
        # TODO: Could cache ~/.nvm/.cache
      - name: Cache Node.js
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install Node.js dependencies
        run: npm ci
      - name: Download web artifacts
        uses: actions/download-artifact@v2
        with:
          name: web-assets
          path: dist
      - name: Download JavaScript artifacts
        uses: actions/download-artifact@v2
        with:
          name: js-assets
          path: web-build
      - name: Combine web and JavaScript artifacts
        run: cp -vnr dist/* web-build/
        # TODO: Overriding web-build files with dist files is disabled with `-n`. Instead, we should test and fail the workflow if there's a match.
      - name: Build FAB
        run: npm run build:fab
      - name: Upload artifacts to GitHub Actions
        uses: actions/upload-artifact@v2
        with:
          name: FAB
          path: fab.zip
  deploy-fab:
    name: Deploy FAB
    needs: [build-fab]
    runs-on: ubuntu-latest
    steps:
      - name: Install Node.js
        shell: bash -l {0}
        run: nvm install && nvm use
        # TODO: Could cache ~/.nvm/.cache
      - name: Cache Node.js
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install Node.js dependencies
        run: npm ci
      - name: Download FAB
        uses: actions/download-artifact@v2
        with:
          name: FAB
      - name: Deploy FAB
        run: npx fab deploy
        env:
          CF_WORKERS_ACCOUNT_ID: 5a883b414d4090a1442b20361f3c43a9
          CF_WORKERS_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
  build-android:
    name: Build Android
    needs: [deploy-fab]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Node.js
        shell: bash -l {0}
        run: nvm install && nvm use
        # TODO: Could cache ~/.nvm/.cache
      - name: Cache Node.js
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Cache Turtle
        uses: actions/cache@v2
        with:
          path: ~/.Turtle
          key: ${{ runner.os }}-turtle
      - name: Install Node.js dependencies
        run: npm ci
      - name: Install Turtle
        run: npm install --no-save turtle-cli@0.20.4
      - name: Build Android
        run: |
          PUBLIC_URL_ANDROID="$PUBLIC_URL""android-index.json"
          echo $EXPO_ANDROID_KEYSTORE_BASE64 > android.jks.base64
          base64 --decode android.jks.base64 > android.jks
          npx turtle build:android \
            -o ./android-app-bundle.aab \
            --public-url "$PUBLIC_URL_ANDROID" \
            --keystore-path ./android.jks \
            --keystore-alias $EXPO_ANDROID_KEYSTORE_ALIAS
          rm -rf android.jks android.jks.base64
        env:
          PUBLIC_URL: https://theevents.company/
          EXPO_ANDROID_KEYSTORE_BASE64: ${{ secrets.EXPO_ANDROID_KEYSTORE_BASE64 }}
          EXPO_ANDROID_KEYSTORE_ALIAS: ${{ secrets.EXPO_ANDROID_KEYSTORE_ALIAS }}
          EXPO_ANDROID_KEYSTORE_PASSWORD: ${{ secrets.EXPO_ANDROID_KEYSTORE_PASSWORD }}
          EXPO_ANDROID_KEY_PASSWORD: ${{ secrets.EXPO_ANDROID_KEY_PASSWORD }}
      - name: Upload artifacts to GitHub Actions
        uses: actions/upload-artifact@v2
        with:
          name: android-app-bundle
          path: ./android-app-bundle.aab
  build-ios:
    name: Build iOS
    needs: [deploy-fab]
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Node.js
        shell: bash -l {0}
        run: nvm install && nvm use
        # TODO: Could cache ~/.nvm/.cache
      - name: Cache Node.js
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Cache Turtle
        uses: actions/cache@v2
        with:
          path: ~/.Turtle
          key: ${{ runner.os }}-turtle
      - name: Install Node.js dependencies
        run: npm ci
      - name: Install Turtle
        run: npm install --no-save turtle-cli@0.20.4
      - name: Build iOS
        run: |
          PUBLIC_URL_IOS="$PUBLIC_URL""ios-index.json"
          npx turtle build:ios \
            -o ./ios.ipa \
            --public-url "$PUBLIC_URL_IOS"
        # TODO: Add credentials
        env:
          PUBLIC_URL: https://theevents.company/
      - name: Upload artifacts to GitHub Actions
        uses: actions/upload-artifact@v2
        with:
          name: ios
          path: ./ios.ipa
